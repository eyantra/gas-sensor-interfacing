
GasSensorInterfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800200  0000105c  000010f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000105c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080026a  0080026a  0000115a  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001021  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000037f  00000000  00000000  00006009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cf  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00006b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00006d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000810  00000000  00000000  000070da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	08 00       	.word	0x0008	; ????
      e6:	00 00       	nop
      e8:	be 92       	st	-X, r11
      ea:	24 49       	sbci	r18, 0x94	; 148
      ec:	12 3e       	cpi	r17, 0xE2	; 226
      ee:	ab aa       	sts	0x9b, r26
      f0:	aa 2a       	or	r10, r26
      f2:	be cd       	rjmp	.-1156   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
      f4:	cc cc       	rjmp	.-1640   	; 0xfffffa8e <__eeprom_end+0xff7efa8e>
      f6:	4c 3e       	cpi	r20, 0xEC	; 236
      f8:	00 00       	nop
      fa:	00 80       	ld	r0, Z
      fc:	be ab       	sts	0x5e, r27
      fe:	aa aa       	sts	0x9a, r26
     100:	aa 3e       	cpi	r26, 0xEA	; 234
     102:	00 00       	nop
     104:	00 00       	nop
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	00 08       	sbc	r0, r0
     112:	41 78       	andi	r20, 0x81	; 129
     114:	d3 bb       	out	0x13, r29	; 19
     116:	43 87       	std	Z+11, r20	; 0x0b
     118:	d1 13       	cpse	r29, r17
     11a:	3d 19       	sub	r19, r13
     11c:	0e 3c       	cpi	r16, 0xCE	; 206
     11e:	c3 bd       	out	0x23, r28	; 35
     120:	42 82       	std	Z+2, r4	; 0x02
     122:	ad 2b       	or	r26, r29
     124:	3e 68       	ori	r19, 0x8E	; 142
     126:	ec 82       	std	Y+4, r14	; 0x04
     128:	76 be       	out	0x36, r7	; 54
     12a:	d9 8f       	std	Y+25, r29	; 0x19
     12c:	e1 a9       	sts	0x41, r30
     12e:	3e 4c       	sbci	r19, 0xCE	; 206
     130:	80 ef       	ldi	r24, 0xF0	; 240
     132:	ff be       	out	0x3f, r15	; 63
     134:	01 c4       	rjmp	.+2050   	; 0x938 <lcd_print+0x152>
     136:	ff 7f       	andi	r31, 0xFF	; 255
     138:	3f 00       	.word	0x003f	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	07 63       	ori	r16, 0x37	; 55
     140:	42 36       	cpi	r20, 0x62	; 98
     142:	b7 9b       	sbis	0x16, 7	; 22
     144:	d8 a7       	lds	r29, 0x78
     146:	1a 39       	cpi	r17, 0x9A	; 154
     148:	68 56       	subi	r22, 0x68	; 104
     14a:	18 ae       	sts	0xb8, r17
     14c:	ba ab       	sts	0x5a, r27
     14e:	55 8c       	ldd	r5, Z+29	; 0x1d
     150:	1d 3c       	cpi	r17, 0xCD	; 205
     152:	b7 cc       	rjmp	.-1682   	; 0xfffffac2 <__eeprom_end+0xff7efac2>
     154:	57 63       	ori	r21, 0x37	; 55
     156:	bd 6d       	ori	r27, 0xDD	; 221
     158:	ed fd       	.word	0xfded	; ????
     15a:	75 3e       	cpi	r23, 0xE5	; 229
     15c:	f6 17       	cp	r31, r22
     15e:	72 31       	cpi	r23, 0x12	; 18
     160:	bf 00       	.word	0x00bf	; ????
     162:	00 00       	nop
     164:	80 3f       	cpi	r24, 0xF0	; 240

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec e5       	ldi	r30, 0x5C	; 92
     17e:	f0 e1       	ldi	r31, 0x10	; 16
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	aa 36       	cpi	r26, 0x6A	; 106
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	aa e6       	ldi	r26, 0x6A	; 106
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a6 37       	cpi	r26, 0x76	; 118
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 4a 02 	call	0x494	; 0x494 <main>
     1a4:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <gasReading>:
         could be derived.
************************************************************************************/ 
unsigned int gasReading(unsigned char channel)
{
	unsigned int gasValue = 0;
	channel = channel & 0x07;
     1ac:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20 | channel;								    // 0x20 is for ADLAR (left adjust) and then | Ch for setting ADMUX(4:0) bits
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;									// Set start conversion bit
     1b4:	ea e7       	ldi	r30, 0x7A	; 122
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	80 64       	ori	r24, 0x40	; 64
     1bc:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);								// Wait for conversion to complete
     1be:	80 81       	ld	r24, Z
     1c0:	84 ff       	sbrs	r24, 4
     1c2:	fd cf       	rjmp	.-6      	; 0x1be <gasReading+0x12>
	gasValue=ADCH;
     1c4:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10;									// clear ADIF (ADC Interrupt Flag) by writing 1 to it
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	90 81       	ld	r25, Z
     1ce:	90 61       	ori	r25, 0x10	; 16
     1d0:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     1d2:	10 92 7b 00 	sts	0x007B, r1
	return gasValue;
}
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	08 95       	ret

000001da <MQResistanceCalculation>:
Remarks: The sensor and the load resistor forms a voltage divider. Given the voltage
         across the load resistor and its resistance, the resistance of the sensor
         could be derived.
************************************************************************************/ 
float MQResistanceCalculation(int channel)
{
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
  unsigned int raw_adc = gasReading(channel);				//read ADC value
     1e6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gasReading>
     1ea:	ec 01       	movw	r28, r24
  return ( ((float)RL_VALUE*(255-raw_adc)/raw_adc));		//Convert reading to resistance
     1ec:	60 91 65 02 	lds	r22, 0x0265
     1f0:	70 91 66 02 	lds	r23, 0x0266
     1f4:	88 27       	eor	r24, r24
     1f6:	77 fd       	sbrc	r23, 7
     1f8:	80 95       	com	r24
     1fa:	98 2f       	mov	r25, r24
     1fc:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatsisf>
     200:	6b 01       	movw	r12, r22
     202:	7c 01       	movw	r14, r24
     204:	6f ef       	ldi	r22, 0xFF	; 255
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	6c 1b       	sub	r22, r28
     20a:	7d 0b       	sbc	r23, r29
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
     214:	9b 01       	movw	r18, r22
     216:	ac 01       	movw	r20, r24
     218:	c7 01       	movw	r24, r14
     21a:	b6 01       	movw	r22, r12
     21c:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
     224:	be 01       	movw	r22, r28
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
     232:	c7 01       	movw	r24, r14
     234:	b6 01       	movw	r22, r12
     236:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
}
     23a:	46 2f       	mov	r20, r22
     23c:	57 2f       	mov	r21, r23
     23e:	68 2f       	mov	r22, r24
     240:	79 2f       	mov	r23, r25
     242:	cb 01       	movw	r24, r22
     244:	ba 01       	movw	r22, r20
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	08 95       	ret

00000254 <MQCalibration>:
         MQResistanceCalculation to calculates the sensor resistance in clean air 
         and then divides it with RO_CLEAN_AIR_FACTOR. RO_CLEAN_AIR_FACTOR is about 
         10, which differs slightly between different sensors.
************************************************************************************/ 
float MQCalibration(int channel)
{
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	6c 01       	movw	r12, r24
     266:	0f 2e       	mov	r0, r31
     268:	f2 e3       	ldi	r31, 0x32	; 50
     26a:	ef 2e       	mov	r14, r31
     26c:	ff 24       	eor	r15, r15
     26e:	f0 2d       	mov	r31, r0
  int i;
  float val=0;
     270:	c0 e0       	ldi	r28, 0x00	; 0
     272:	d0 e0       	ldi	r29, 0x00	; 0
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	00 e0       	ldi	r16, 0x00	; 0

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQResistanceCalculation(channel);
     278:	c6 01       	movw	r24, r12
     27a:	0e 94 ed 00 	call	0x1da	; 0x1da <MQResistanceCalculation>
     27e:	9b 01       	movw	r18, r22
     280:	ac 01       	movw	r20, r24
     282:	8c 2f       	mov	r24, r28
     284:	9d 2f       	mov	r25, r29
     286:	a1 2f       	mov	r26, r17
     288:	b0 2f       	mov	r27, r16
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	0e 94 b2 04 	call	0x964	; 0x964 <__addsf3>
     292:	c6 2f       	mov	r28, r22
     294:	d7 2f       	mov	r29, r23
     296:	18 2f       	mov	r17, r24
     298:	09 2f       	mov	r16, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29a:	89 e5       	ldi	r24, 0x59	; 89
     29c:	90 e8       	ldi	r25, 0x80	; 128
     29e:	a6 e1       	ldi	r26, 0x16	; 22
     2a0:	81 50       	subi	r24, 0x01	; 1
     2a2:	90 40       	sbci	r25, 0x00	; 0
     2a4:	a0 40       	sbci	r26, 0x00	; 0
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <MQCalibration+0x4c>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <MQCalibration+0x56>
     2aa:	00 00       	nop
     2ac:	08 94       	sec
     2ae:	e1 08       	sbc	r14, r1
     2b0:	f1 08       	sbc	r15, r1
float MQCalibration(int channel)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
     2b2:	e1 14       	cp	r14, r1
     2b4:	f1 04       	cpc	r15, r1
     2b6:	01 f7       	brne	.-64     	; 0x278 <MQCalibration+0x24>
    val += MQResistanceCalculation(channel);
    _delay_ms(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value
     2b8:	8c 2f       	mov	r24, r28
     2ba:	9d 2f       	mov	r25, r29
     2bc:	a1 2f       	mov	r26, r17
     2be:	b0 2f       	mov	r27, r16
     2c0:	bc 01       	movw	r22, r24
     2c2:	cd 01       	movw	r24, r26
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	48 e4       	ldi	r20, 0x48	; 72
     2ca:	52 e4       	ldi	r21, 0x42	; 66
     2cc:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro                                        
     2d0:	46 2f       	mov	r20, r22
     2d2:	57 2f       	mov	r21, r23
     2d4:	68 2f       	mov	r22, r24
     2d6:	79 2f       	mov	r23, r25
     2d8:	cb 01       	movw	r24, r22
     2da:	ba 01       	movw	r22, r20
     2dc:	20 91 61 02 	lds	r18, 0x0261
     2e0:	30 91 62 02 	lds	r19, 0x0262
     2e4:	40 91 63 02 	lds	r20, 0x0263
     2e8:	50 91 64 02 	lds	r21, 0x0264
     2ec:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
  return val;                                           //according to the chart in the data sheet 

}
     2f0:	46 2f       	mov	r20, r22
     2f2:	57 2f       	mov	r21, r23
     2f4:	68 2f       	mov	r22, r24
     2f6:	79 2f       	mov	r23, r25
     2f8:	cb 01       	movw	r24, r22
     2fa:	ba 01       	movw	r22, r20
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <MQRead>:
         The Rs changes as the sensor is in the different concentration of the target
         gas. The sample times and the time interval between samples could be configured
         by changing the definition of the macros.
************************************************************************************/ 
float MQRead(int channel)
{
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	6c 01       	movw	r12, r24
     320:	0f 2e       	mov	r0, r31
     322:	f5 e0       	ldi	r31, 0x05	; 5
     324:	ef 2e       	mov	r14, r31
     326:	ff 24       	eor	r15, r15
     328:	f0 2d       	mov	r31, r0
  int i;
  float rs=0;
     32a:	c0 e0       	ldi	r28, 0x00	; 0
     32c:	d0 e0       	ldi	r29, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	00 e0       	ldi	r16, 0x00	; 0
 
  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQResistanceCalculation(channel);
     332:	c6 01       	movw	r24, r12
     334:	0e 94 ed 00 	call	0x1da	; 0x1da <MQResistanceCalculation>
     338:	9b 01       	movw	r18, r22
     33a:	ac 01       	movw	r20, r24
     33c:	8c 2f       	mov	r24, r28
     33e:	9d 2f       	mov	r25, r29
     340:	a1 2f       	mov	r26, r17
     342:	b0 2f       	mov	r27, r16
     344:	bc 01       	movw	r22, r24
     346:	cd 01       	movw	r24, r26
     348:	0e 94 b2 04 	call	0x964	; 0x964 <__addsf3>
     34c:	c6 2f       	mov	r28, r22
     34e:	d7 2f       	mov	r29, r23
     350:	18 2f       	mov	r17, r24
     352:	09 2f       	mov	r16, r25
     354:	88 e0       	ldi	r24, 0x08	; 8
     356:	90 e4       	ldi	r25, 0x40	; 64
     358:	a2 e0       	ldi	r26, 0x02	; 2
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	90 40       	sbci	r25, 0x00	; 0
     35e:	a0 40       	sbci	r26, 0x00	; 0
     360:	e1 f7       	brne	.-8      	; 0x35a <MQRead+0x4c>
     362:	00 c0       	rjmp	.+0      	; 0x364 <MQRead+0x56>
     364:	00 00       	nop
     366:	08 94       	sec
     368:	e1 08       	sbc	r14, r1
     36a:	f1 08       	sbc	r15, r1
float MQRead(int channel)
{
  int i;
  float rs=0;
 
  for (i=0;i<READ_SAMPLE_TIMES;i++) {
     36c:	e1 14       	cp	r14, r1
     36e:	f1 04       	cpc	r15, r1
     370:	01 f7       	brne	.-64     	; 0x332 <MQRead+0x24>
    rs += MQResistanceCalculation(channel);
    _delay_ms(READ_SAMPLE_INTERVAL);
  }
 
  rs = rs/READ_SAMPLE_TIMES;
     372:	8c 2f       	mov	r24, r28
     374:	9d 2f       	mov	r25, r29
     376:	a1 2f       	mov	r26, r17
     378:	b0 2f       	mov	r27, r16
     37a:	bc 01       	movw	r22, r24
     37c:	cd 01       	movw	r24, r26
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	40 ea       	ldi	r20, 0xA0	; 160
     384:	50 e4       	ldi	r21, 0x40	; 64
     386:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
 
  return rs;  
}
     38a:	46 2f       	mov	r20, r22
     38c:	57 2f       	mov	r21, r23
     38e:	68 2f       	mov	r22, r24
     390:	79 2f       	mov	r23, r25
     392:	cb 01       	movw	r24, r22
     394:	ba 01       	movw	r22, r20
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <MQGetPercentage>:
         of the line could be derived if y(rs_ro_ratio) is provided. As it is a 
         logarithmic coordinate, power of 10 is used to convert the result to non-logarithmic 
         value.
************************************************************************************/ 
long  MQGetPercentage(float rs_ro_ratio, float *pcurve)
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ea 01       	movw	r28, r20
  return (pow(10,( ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
     3ae:	0e 94 42 06 	call	0xc84	; 0xc84 <log>
     3b2:	2c 81       	ldd	r18, Y+4	; 0x04
     3b4:	3d 81       	ldd	r19, Y+5	; 0x05
     3b6:	4e 81       	ldd	r20, Y+6	; 0x06
     3b8:	5f 81       	ldd	r21, Y+7	; 0x07
     3ba:	0e 94 b1 04 	call	0x962	; 0x962 <__subsf3>
     3be:	28 85       	ldd	r18, Y+8	; 0x08
     3c0:	39 85       	ldd	r19, Y+9	; 0x09
     3c2:	4a 85       	ldd	r20, Y+10	; 0x0a
     3c4:	5b 85       	ldd	r21, Y+11	; 0x0b
     3c6:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
     3ca:	28 81       	ld	r18, Y
     3cc:	39 81       	ldd	r19, Y+1	; 0x01
     3ce:	4a 81       	ldd	r20, Y+2	; 0x02
     3d0:	5b 81       	ldd	r21, Y+3	; 0x03
     3d2:	0e 94 b2 04 	call	0x964	; 0x964 <__addsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	80 e2       	ldi	r24, 0x20	; 32
     3e0:	91 e4       	ldi	r25, 0x41	; 65
     3e2:	0e 94 e5 06 	call	0xdca	; 0xdca <pow>
     3e6:	46 2f       	mov	r20, r22
     3e8:	57 2f       	mov	r21, r23
     3ea:	68 2f       	mov	r22, r24
     3ec:	79 2f       	mov	r23, r25
     3ee:	cb 01       	movw	r24, r22
     3f0:	ba 01       	movw	r22, r20
     3f2:	0e 94 7e 05 	call	0xafc	; 0xafc <__fixsfsi>
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <MQGetGasPercentage>:
Output:  ppm of the target gas
Remarks: This function passes different curves to the MQGetPercentage function which 
         calculates the ppm (parts per million) of the target gas.
************************************************************************************/ 
long MQGetGasPercentage(float rs_ro_ratio, int gas_id)
{
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
  if ( gas_id == GAS_LPG ) {
     400:	41 15       	cp	r20, r1
     402:	51 05       	cpc	r21, r1
     404:	39 f4       	brne	.+14     	; 0x414 <MQGetGasPercentage+0x18>
     return MQGetPercentage(rs_ro_ratio,LPGCurve);
     406:	4d e4       	ldi	r20, 0x4D	; 77
     408:	52 e0       	ldi	r21, 0x02	; 2
     40a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <MQGetPercentage>
     40e:	8b 01       	movw	r16, r22
     410:	9c 01       	movw	r18, r24
     412:	17 c0       	rjmp	.+46     	; 0x442 <MQGetGasPercentage+0x46>
  } else if ( gas_id == GAS_CO ) {
     414:	41 30       	cpi	r20, 0x01	; 1
     416:	51 05       	cpc	r21, r1
     418:	39 f4       	brne	.+14     	; 0x428 <MQGetGasPercentage+0x2c>
     return MQGetPercentage(rs_ro_ratio,COCurve);
     41a:	41 e4       	ldi	r20, 0x41	; 65
     41c:	52 e0       	ldi	r21, 0x02	; 2
     41e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <MQGetPercentage>
     422:	8b 01       	movw	r16, r22
     424:	9c 01       	movw	r18, r24
     426:	0d c0       	rjmp	.+26     	; 0x442 <MQGetGasPercentage+0x46>
  } else if ( gas_id == GAS_SMOKE ) {
     428:	42 30       	cpi	r20, 0x02	; 2
     42a:	51 05       	cpc	r21, r1
     42c:	39 f4       	brne	.+14     	; 0x43c <MQGetGasPercentage+0x40>
     return MQGetPercentage(rs_ro_ratio,SmokeCurve);
     42e:	45 e3       	ldi	r20, 0x35	; 53
     430:	52 e0       	ldi	r21, 0x02	; 2
     432:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <MQGetPercentage>
     436:	8b 01       	movw	r16, r22
     438:	9c 01       	movw	r18, r24
     43a:	03 c0       	rjmp	.+6      	; 0x442 <MQGetGasPercentage+0x46>
  }    
  return 0;
     43c:	00 e0       	ldi	r16, 0x00	; 0
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	98 01       	movw	r18, r16
}
     442:	60 2f       	mov	r22, r16
     444:	71 2f       	mov	r23, r17
     446:	82 2f       	mov	r24, r18
     448:	93 2f       	mov	r25, r19
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <lcd_port_config>:
 

void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7;									//all the LCD pin's direction set as output
     450:	87 b1       	in	r24, 0x07	; 7
     452:	87 6f       	ori	r24, 0xF7	; 247
     454:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x08;								// all the LCD pins are set to logic 0 except PORTC 7
     456:	88 b1       	in	r24, 0x08	; 8
     458:	88 70       	andi	r24, 0x08	; 8
     45a:	88 b9       	out	0x08, r24	; 8
}
     45c:	08 95       	ret

0000045e <gas_sensor_port_config>:

void gas_sensor_port_config (void)
{
	DDRF = 0x00;										//All ADC pins set as input and initialised to 0
     45e:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     460:	11 ba       	out	0x11, r1	; 17
	ADCSRA = 0x00;										// disable ADC during initialization.
     462:	ea e7       	ldi	r30, 0x7A	; 122
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	10 82       	st	Z, r1
	ADCSRB = 0x00;										// Write suitable value in this register for initialization.
     468:	10 92 7b 00 	sts	0x007B, r1
	ADMUX  = 0x20;										// select external Reference voltage (connected to AREF pin) and left adjustment result (LAR) active.
     46c:	80 e2       	ldi	r24, 0x20	; 32
     46e:	80 93 7c 00 	sts	0x007C, r24
	ACSR   = 0x80;										// Disable the analog comparator
     472:	80 e8       	ldi	r24, 0x80	; 128
     474:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;										// enable ADC and select pre-scalar as 64
     476:	86 e8       	ldi	r24, 0x86	; 134
     478:	80 83       	st	Z, r24
}
     47a:	08 95       	ret

0000047c <port_init>:

void port_init()
{
	lcd_port_config();
     47c:	0e 94 28 02 	call	0x450	; 0x450 <lcd_port_config>
	gas_sensor_port_config();
     480:	0e 94 2f 02 	call	0x45e	; 0x45e <gas_sensor_port_config>
}
     484:	08 95       	ret

00000486 <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
     486:	f8 94       	cli
	port_init();
     488:	0e 94 3e 02 	call	0x47c	; 0x47c <port_init>
	lcd_init();
     48c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_init>
	sei(); //Enables the global interrupts
     490:	78 94       	sei
}
     492:	08 95       	ret

00000494 <main>:


int main(void)
{
	init_devices();
     494:	0e 94 43 02 	call	0x486	; 0x486 <init_devices>
	lcd_string(1,1,"Calibrating...");
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	52 e0       	ldi	r21, 0x02	; 2
     4a0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
	Ro = MQCalibration(MQ_PIN);
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 2a 01 	call	0x254	; 0x254 <MQCalibration>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	80 93 31 02 	sts	0x0231, r24
     4b4:	90 93 32 02 	sts	0x0232, r25
     4b8:	a0 93 33 02 	sts	0x0233, r26
     4bc:	b0 93 34 02 	sts	0x0234, r27
	lcd_clear();
     4c0:	0e 94 a9 03 	call	0x752	; 0x752 <lcd_clear>
	lcd_string(1,1,"Done!..");
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	4f e0       	ldi	r20, 0x0F	; 15
     4ca:	52 e0       	ldi	r21, 0x02	; 2
     4cc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
	lcd_string(2,1,"Ro= ");
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	47 e1       	ldi	r20, 0x17	; 23
     4d6:	52 e0       	ldi	r21, 0x02	; 2
     4d8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
	lcd_print(2,5,Ro,6);
     4dc:	60 91 31 02 	lds	r22, 0x0231
     4e0:	70 91 32 02 	lds	r23, 0x0232
     4e4:	80 91 33 02 	lds	r24, 0x0233
     4e8:	90 91 34 02 	lds	r25, 0x0234
     4ec:	0e 94 7e 05 	call	0xafc	; 0xafc <__fixsfsi>
     4f0:	8b 01       	movw	r16, r22
     4f2:	9c 01       	movw	r18, r24
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	65 e0       	ldi	r22, 0x05	; 5
     4f8:	a8 01       	movw	r20, r16
     4fa:	26 e0       	ldi	r18, 0x06	; 6
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <lcd_print>
	lcd_string(2,12,"kOhm");
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	6c e0       	ldi	r22, 0x0C	; 12
     506:	4c e1       	ldi	r20, 0x1C	; 28
     508:	52 e0       	ldi	r21, 0x02	; 2
     50a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
     50e:	8b e1       	ldi	r24, 0x1B	; 27
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	a7 e8       	ldi	r26, 0x87	; 135
     514:	81 50       	subi	r24, 0x01	; 1
     516:	90 40       	sbci	r25, 0x00	; 0
     518:	a0 40       	sbci	r26, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <main+0x80>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <main+0x8a>
     51e:	00 00       	nop
		iPPM_LPG = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_LPG);
		iPPM_CO = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_CO);
		iPPM_Smoke = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_SMOKE);
		
		lcd_clear();
		lcd_string(1,1,"LPG=");
     520:	c1 e2       	ldi	r28, 0x21	; 33
     522:	d2 e0       	ldi	r29, 0x02	; 2
		lcd_print(1,5,iPPM_LPG,4);
		lcd_string(1,9,"CO=");
     524:	06 e2       	ldi	r16, 0x26	; 38
     526:	12 e0       	ldi	r17, 0x02	; 2
		lcd_print(1,12,iPPM_CO,4);
		lcd_string(2,1,"Smoke=");
     528:	0f 2e       	mov	r0, r31
     52a:	fa e2       	ldi	r31, 0x2A	; 42
     52c:	2f 2e       	mov	r2, r31
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	3f 2e       	mov	r3, r31
     532:	f0 2d       	mov	r31, r0
		
		long iPPM_LPG = 0;
		long iPPM_CO = 0;
		long iPPM_Smoke = 0;

		iPPM_LPG = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_LPG);
     534:	84 e0       	ldi	r24, 0x04	; 4
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 87 01 	call	0x30e	; 0x30e <MQRead>
     53c:	20 91 31 02 	lds	r18, 0x0231
     540:	30 91 32 02 	lds	r19, 0x0232
     544:	40 91 33 02 	lds	r20, 0x0233
     548:	50 91 34 02 	lds	r21, 0x0234
     54c:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MQGetGasPercentage>
     558:	2b 01       	movw	r4, r22
     55a:	3c 01       	movw	r6, r24
		iPPM_CO = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_CO);
     55c:	84 e0       	ldi	r24, 0x04	; 4
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 87 01 	call	0x30e	; 0x30e <MQRead>
     564:	20 91 31 02 	lds	r18, 0x0231
     568:	30 91 32 02 	lds	r19, 0x0232
     56c:	40 91 33 02 	lds	r20, 0x0233
     570:	50 91 34 02 	lds	r21, 0x0234
     574:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MQGetGasPercentage>
     580:	4b 01       	movw	r8, r22
     582:	5c 01       	movw	r10, r24
		iPPM_Smoke = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_SMOKE);
     584:	84 e0       	ldi	r24, 0x04	; 4
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 87 01 	call	0x30e	; 0x30e <MQRead>
     58c:	20 91 31 02 	lds	r18, 0x0231
     590:	30 91 32 02 	lds	r19, 0x0232
     594:	40 91 33 02 	lds	r20, 0x0233
     598:	50 91 34 02 	lds	r21, 0x0234
     59c:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divsf3>
     5a0:	42 e0       	ldi	r20, 0x02	; 2
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MQGetGasPercentage>
     5a8:	6b 01       	movw	r12, r22
     5aa:	7c 01       	movw	r14, r24
		
		lcd_clear();
     5ac:	0e 94 a9 03 	call	0x752	; 0x752 <lcd_clear>
		lcd_string(1,1,"LPG=");
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	ae 01       	movw	r20, r28
     5b6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
		lcd_print(1,5,iPPM_LPG,4);
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	65 e0       	ldi	r22, 0x05	; 5
     5be:	a2 01       	movw	r20, r4
     5c0:	24 e0       	ldi	r18, 0x04	; 4
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <lcd_print>
		lcd_string(1,9,"CO=");
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	69 e0       	ldi	r22, 0x09	; 9
     5cc:	a8 01       	movw	r20, r16
     5ce:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
		lcd_print(1,12,iPPM_CO,4);
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	6c e0       	ldi	r22, 0x0C	; 12
     5d6:	a4 01       	movw	r20, r8
     5d8:	24 e0       	ldi	r18, 0x04	; 4
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <lcd_print>
		lcd_string(2,1,"Smoke=");
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	a1 01       	movw	r20, r2
     5e6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
		lcd_print(2,7,iPPM_Smoke,4);
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	67 e0       	ldi	r22, 0x07	; 7
     5ee:	a6 01       	movw	r20, r12
     5f0:	24 e0       	ldi	r18, 0x04	; 4
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <lcd_print>
     5f8:	81 e1       	ldi	r24, 0x11	; 17
     5fa:	90 e8       	ldi	r25, 0x80	; 128
     5fc:	a4 e0       	ldi	r26, 0x04	; 4
     5fe:	81 50       	subi	r24, 0x01	; 1
     600:	90 40       	sbci	r25, 0x00	; 0
     602:	a0 40       	sbci	r26, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x16a>
     606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x174>
     608:	00 00       	nop
     60a:	94 cf       	rjmp	.-216    	; 0x534 <main+0xa0>

0000060c <lcd_set_4bit>:
     60c:	86 e6       	ldi	r24, 0x66	; 102
     60e:	9e e0       	ldi	r25, 0x0E	; 14
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <lcd_set_4bit+0x4>
     614:	00 00       	nop
 * Example Call: lcd_set_4bit();
 */
void lcd_set_4bit (void)
{
	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
     616:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
     618:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				// Sending 3
     61a:	80 e3       	ldi	r24, 0x30	; 48
     61c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
     61e:	42 9a       	sbi	0x08, 2	; 8
     620:	ef ef       	ldi	r30, 0xFF	; 255
     622:	f7 e4       	ldi	r31, 0x47	; 71
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <lcd_set_4bit+0x18>
     628:	00 c0       	rjmp	.+0      	; 0x62a <lcd_set_4bit+0x1e>
     62a:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
     62c:	42 98       	cbi	0x08, 2	; 8
     62e:	e6 e6       	ldi	r30, 0x66	; 102
     630:	fe e0       	ldi	r31, 0x0E	; 14
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <lcd_set_4bit+0x26>
     636:	00 00       	nop

	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
     638:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
     63a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				// Sending 3
     63c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
     63e:	42 9a       	sbi	0x08, 2	; 8
     640:	ef ef       	ldi	r30, 0xFF	; 255
     642:	f7 e4       	ldi	r31, 0x47	; 71
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <lcd_set_4bit+0x38>
     648:	00 c0       	rjmp	.+0      	; 0x64a <lcd_set_4bit+0x3e>
     64a:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
     64c:	42 98       	cbi	0x08, 2	; 8
     64e:	e6 e6       	ldi	r30, 0x66	; 102
     650:	fe e0       	ldi	r31, 0x0E	; 14
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <lcd_set_4bit+0x46>
     656:	00 00       	nop

	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
     658:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
     65a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				// Sending 3
     65c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
     65e:	42 9a       	sbi	0x08, 2	; 8
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	97 e4       	ldi	r25, 0x47	; 71
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <lcd_set_4bit+0x58>
     668:	00 c0       	rjmp	.+0      	; 0x66a <lcd_set_4bit+0x5e>
     66a:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
     66c:	42 98       	cbi	0x08, 2	; 8
     66e:	e6 e6       	ldi	r30, 0x66	; 102
     670:	fe e0       	ldi	r31, 0x0E	; 14
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <lcd_set_4bit+0x66>
     676:	00 00       	nop

	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
     678:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
     67a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				// Sending 2 to initialize LCD in 4-bit mode
     67c:	80 e2       	ldi	r24, 0x20	; 32
     67e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
     680:	42 9a       	sbi	0x08, 2	; 8
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	97 e4       	ldi	r25, 0x47	; 71
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <lcd_set_4bit+0x7a>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <lcd_set_4bit+0x80>
     68c:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
     68e:	42 98       	cbi	0x08, 2	; 8
}
     690:	08 95       	ret

00000692 <lcd_wr_command>:
void lcd_wr_command (unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     692:	98 b1       	in	r25, 0x08	; 8
     694:	9f 70       	andi	r25, 0x0F	; 15
     696:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     698:	98 b1       	in	r25, 0x08	; 8
 */
void lcd_wr_command (unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     69a:	28 2f       	mov	r18, r24
     69c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     69e:	92 2b       	or	r25, r18
     6a0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     6a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     6a4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     6a6:	42 9a       	sbi	0x08, 2	; 8
     6a8:	ef ef       	ldi	r30, 0xFF	; 255
     6aa:	f7 e4       	ldi	r31, 0x47	; 71
     6ac:	31 97       	sbiw	r30, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <lcd_wr_command+0x1a>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <lcd_wr_command+0x20>
     6b2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     6b4:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     6b6:	98 b1       	in	r25, 0x08	; 8
     6b8:	9f 70       	andi	r25, 0x0F	; 15
     6ba:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     6bc:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     6be:	82 95       	swap	r24
     6c0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     6c2:	89 2b       	or	r24, r25
     6c4:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     6c6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     6c8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     6ca:	42 9a       	sbi	0x08, 2	; 8
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	97 e4       	ldi	r25, 0x47	; 71
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd_wr_command+0x3e>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <lcd_wr_command+0x44>
     6d6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     6d8:	42 98       	cbi	0x08, 2	; 8
}
     6da:	08 95       	ret

000006dc <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
     6dc:	0e 94 06 03 	call	0x60c	; 0x60c <lcd_set_4bit>
     6e0:	86 e6       	ldi	r24, 0x66	; 102
     6e2:	9e e0       	ldi	r25, 0x0E	; 14
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <lcd_init+0x8>
     6e8:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);		// LCD 4-bit mode and 2 lines
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
	lcd_wr_command(0x01);       // Clear display screen
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
	lcd_wr_command(0x06);       // Entry mode
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
	lcd_wr_command(0x0E);       // Display On and Cursor On
     6fc:	8e e0       	ldi	r24, 0x0E	; 14
     6fe:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
	lcd_wr_command(0x80);       // LCD cursor set to Home position		
     702:	80 e8       	ldi	r24, 0x80	; 128
     704:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
}
     708:	08 95       	ret

0000070a <lcd_home>:
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);		// LCD cursor set to Home position
     70a:	80 e8       	ldi	r24, 0x80	; 128
     70c:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
}
     710:	08 95       	ret

00000712 <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	79 f0       	breq	.+30     	; 0x734 <lcd_cursor+0x22>
     716:	83 30       	cpi	r24, 0x03	; 3
     718:	18 f4       	brcc	.+6      	; 0x720 <lcd_cursor+0xe>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	c9 f4       	brne	.+50     	; 0x750 <lcd_cursor+0x3e>
     71e:	05 c0       	rjmp	.+10     	; 0x72a <lcd_cursor+0x18>
     720:	83 30       	cpi	r24, 0x03	; 3
     722:	69 f0       	breq	.+26     	; 0x73e <lcd_cursor+0x2c>
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	a1 f4       	brne	.+40     	; 0x750 <lcd_cursor+0x3e>
     728:	0f c0       	rjmp	.+30     	; 0x748 <lcd_cursor+0x36>
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
     72a:	86 2f       	mov	r24, r22
     72c:	81 58       	subi	r24, 0x81	; 129
     72e:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
     732:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
     734:	86 2f       	mov	r24, r22
     736:	81 54       	subi	r24, 0x41	; 65
     738:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
     73c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     73e:	86 2f       	mov	r24, r22
     740:	8d 56       	subi	r24, 0x6D	; 109
     742:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
     746:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
     748:	86 2f       	mov	r24, r22
     74a:	8d 52       	subi	r24, 0x2D	; 45
     74c:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
     750:	08 95       	ret

00000752 <lcd_clear>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 49 03 	call	0x692	; 0x692 <lcd_wr_command>
}
     758:	08 95       	ret

0000075a <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
     75a:	cf 93       	push	r28
     75c:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
     75e:	0e 94 89 03 	call	0x712	; 0x712 <lcd_cursor>
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     762:	88 b1       	in	r24, 0x08	; 8
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
     768:	88 b1       	in	r24, 0x08	; 8
{
	lcd_cursor (row, column);
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
     76a:	9c 2f       	mov	r25, r28
     76c:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     76e:	89 2b       	or	r24, r25
     770:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     772:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     774:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     776:	42 9a       	sbi	0x08, 2	; 8
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	97 e4       	ldi	r25, 0x47	; 71
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <lcd_wr_char+0x22>
     780:	00 c0       	rjmp	.+0      	; 0x782 <lcd_wr_char+0x28>
     782:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     784:	42 98       	cbi	0x08, 2	; 8

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
	lcd_port &= 0x0F;
     786:	88 b1       	in	r24, 0x08	; 8
     788:	8f 70       	andi	r24, 0x0F	; 15
     78a:	88 b9       	out	0x08, r24	; 8
	lcd_port |= alpha_num_char;
     78c:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
     78e:	c2 95       	swap	r28
     790:	c0 7f       	andi	r28, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= alpha_num_char;
     792:	c8 2b       	or	r28, r24
     794:	c8 b9       	out	0x08, r28	; 8
	sbit(lcd_port,RS);
     796:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     798:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     79a:	42 9a       	sbi	0x08, 2	; 8
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	97 e4       	ldi	r25, 0x47	; 71
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_wr_char+0x46>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <lcd_wr_char+0x4c>
     7a6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     7a8:	42 98       	cbi	0x08, 2	; 8
}
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	d8 2f       	mov	r29, r24
     7b8:	c6 2f       	mov	r28, r22
     7ba:	fa 01       	movw	r30, r20
	while(*str != '\0')
     7bc:	40 81       	ld	r20, Z
     7be:	44 23       	and	r20, r20
     7c0:	69 f0       	breq	.+26     	; 0x7dc <lcd_string+0x2e>
 *        *str => pointer of the char data type which points to the address of first character of the string
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
     7c2:	8f 01       	movw	r16, r30
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(*str != '\0')
	{
		lcd_wr_char(row, column, *str);
     7c8:	8d 2f       	mov	r24, r29
     7ca:	6c 2f       	mov	r22, r28
     7cc:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		str++;
		column+=1;
     7d0:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
     7d2:	f8 01       	movw	r30, r16
     7d4:	41 91       	ld	r20, Z+
     7d6:	8f 01       	movw	r16, r30
     7d8:	44 23       	and	r20, r20
     7da:	b1 f7       	brne	.-20     	; 0x7c8 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	08 95       	ret

000007e6 <lcd_print>:
 * Output: This function prints any integer value or value in a variable as integer
 *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_print(1, 1, -20, 2);
 */
void lcd_print(char row, char column, int val, int digits)
{
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	d8 2f       	mov	r29, r24
     7f4:	c6 2f       	mov	r28, r22
     7f6:	7a 01       	movw	r14, r20
     7f8:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
     7fa:	0e 94 89 03 	call	0x712	; 0x712 <lcd_cursor>
	
	if (val < 0)
     7fe:	ff 20       	and	r15, r15
     800:	5c f4       	brge	.+22     	; 0x818 <lcd_print+0x32>
	{
		val = 0 - val;
     802:	f0 94       	com	r15
     804:	e1 94       	neg	r14
     806:	f1 08       	sbc	r15, r1
     808:	f3 94       	inc	r15
		lcd_string(row, column, "-");
     80a:	8d 2f       	mov	r24, r29
     80c:	6c 2f       	mov	r22, r28
     80e:	47 e6       	ldi	r20, 0x67	; 103
     810:	52 e0       	ldi	r21, 0x02	; 2
     812:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_string>
		column+=1;
     816:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
     818:	dd 23       	and	r29, r29
     81a:	11 f0       	breq	.+4      	; 0x820 <lcd_print+0x3a>
     81c:	cc 23       	and	r28, r28
     81e:	19 f4       	brne	.+6      	; 0x826 <lcd_print+0x40>
	{
		lcd_home();
     820:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_home>
     824:	04 c0       	rjmp	.+8      	; 0x82e <lcd_print+0x48>
	}
	
	else
	{
		lcd_cursor(row, column);
     826:	8d 2f       	mov	r24, r29
     828:	6c 2f       	mov	r22, r28
     82a:	0e 94 89 03 	call	0x712	; 0x712 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
     82e:	05 30       	cpi	r16, 0x05	; 5
     830:	11 05       	cpc	r17, r1
     832:	91 f4       	brne	.+36     	; 0x858 <lcd_print+0x72>
	{
		million = val/10000+48;
     834:	c7 01       	movw	r24, r14
     836:	60 e1       	ldi	r22, 0x10	; 16
     838:	77 e2       	ldi	r23, 0x27	; 39
     83a:	0e 94 19 08 	call	0x1032	; 0x1032 <__divmodhi4>
     83e:	ab 01       	movw	r20, r22
     840:	40 5d       	subi	r20, 0xD0	; 208
     842:	5f 4f       	sbci	r21, 0xFF	; 255
     844:	50 93 6b 02 	sts	0x026B, r21
     848:	40 93 6a 02 	sts	0x026A, r20
		lcd_wr_char(row ,column, million);
     84c:	8d 2f       	mov	r24, r29
     84e:	6c 2f       	mov	r22, r28
     850:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		column+=1;
     854:	cf 5f       	subi	r28, 0xFF	; 255
     856:	03 c0       	rjmp	.+6      	; 0x85e <lcd_print+0x78>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
     858:	04 30       	cpi	r16, 0x04	; 4
     85a:	11 05       	cpc	r17, r1
     85c:	e1 f4       	brne	.+56     	; 0x896 <lcd_print+0xb0>
	{
		temp = val/1000;
     85e:	c7 01       	movw	r24, r14
     860:	68 ee       	ldi	r22, 0xE8	; 232
     862:	73 e0       	ldi	r23, 0x03	; 3
     864:	0e 94 19 08 	call	0x1032	; 0x1032 <__divmodhi4>
     868:	cb 01       	movw	r24, r22
     86a:	70 93 6d 02 	sts	0x026D, r23
     86e:	60 93 6c 02 	sts	0x026C, r22
		thousand = temp%10 + 48;
     872:	6a e0       	ldi	r22, 0x0A	; 10
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	0e 94 05 08 	call	0x100a	; 0x100a <__udivmodhi4>
     87a:	ac 01       	movw	r20, r24
     87c:	40 5d       	subi	r20, 0xD0	; 208
     87e:	5f 4f       	sbci	r21, 0xFF	; 255
     880:	50 93 75 02 	sts	0x0275, r21
     884:	40 93 74 02 	sts	0x0274, r20
		lcd_wr_char(row, column, thousand);
     888:	8d 2f       	mov	r24, r29
     88a:	6c 2f       	mov	r22, r28
     88c:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		column+=1;
     890:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	01 c0       	rjmp	.+2      	; 0x898 <lcd_print+0xb2>
		val = 0 - val;
		lcd_string(row, column, "-");
		column+=1;
	}
		
	unsigned char flag = 0;
     896:	80 e0       	ldi	r24, 0x00	; 0
		lcd_wr_char(row, column, thousand);
		column+=1;
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
     898:	03 30       	cpi	r16, 0x03	; 3
     89a:	11 05       	cpc	r17, r1
     89c:	11 f0       	breq	.+4      	; 0x8a2 <lcd_print+0xbc>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	d9 f4       	brne	.+54     	; 0x8d8 <lcd_print+0xf2>
	{
		temp = val/100;
     8a2:	c7 01       	movw	r24, r14
     8a4:	64 e6       	ldi	r22, 0x64	; 100
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	0e 94 19 08 	call	0x1032	; 0x1032 <__divmodhi4>
     8ac:	cb 01       	movw	r24, r22
     8ae:	70 93 6d 02 	sts	0x026D, r23
     8b2:	60 93 6c 02 	sts	0x026C, r22
		hundred = temp%10 + 48;
     8b6:	6a e0       	ldi	r22, 0x0A	; 10
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 05 08 	call	0x100a	; 0x100a <__udivmodhi4>
     8be:	ac 01       	movw	r20, r24
     8c0:	40 5d       	subi	r20, 0xD0	; 208
     8c2:	5f 4f       	sbci	r21, 0xFF	; 255
     8c4:	50 93 71 02 	sts	0x0271, r21
     8c8:	40 93 70 02 	sts	0x0270, r20
		lcd_wr_char(row, column, hundred);
     8cc:	8d 2f       	mov	r24, r29
     8ce:	6c 2f       	mov	r22, r28
     8d0:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		column+=1;
     8d4:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(digits == 2 || flag == 1)
     8d8:	02 30       	cpi	r16, 0x02	; 2
     8da:	11 05       	cpc	r17, r1
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <lcd_print+0xfc>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	d9 f4       	brne	.+54     	; 0x918 <lcd_print+0x132>
	{
		temp = val/10;
     8e2:	2a e0       	ldi	r18, 0x0A	; 10
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	c7 01       	movw	r24, r14
     8e8:	b9 01       	movw	r22, r18
     8ea:	0e 94 19 08 	call	0x1032	; 0x1032 <__divmodhi4>
     8ee:	cb 01       	movw	r24, r22
     8f0:	70 93 6d 02 	sts	0x026D, r23
     8f4:	60 93 6c 02 	sts	0x026C, r22
		tens = temp%10 + 48;
     8f8:	b9 01       	movw	r22, r18
     8fa:	0e 94 05 08 	call	0x100a	; 0x100a <__udivmodhi4>
     8fe:	ac 01       	movw	r20, r24
     900:	40 5d       	subi	r20, 0xD0	; 208
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	50 93 6f 02 	sts	0x026F, r21
     908:	40 93 6e 02 	sts	0x026E, r20
		lcd_wr_char(row, column, tens);
     90c:	8d 2f       	mov	r24, r29
     90e:	6c 2f       	mov	r22, r28
     910:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		column+=1;
     914:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
     916:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(digits == 1 || flag == 1)
     918:	01 30       	cpi	r16, 0x01	; 1
     91a:	11 05       	cpc	r17, r1
     91c:	11 f0       	breq	.+4      	; 0x922 <lcd_print+0x13c>
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	89 f4       	brne	.+34     	; 0x944 <lcd_print+0x15e>
	{
		unit = val%10 + 48;
     922:	c7 01       	movw	r24, r14
     924:	6a e0       	ldi	r22, 0x0A	; 10
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	0e 94 19 08 	call	0x1032	; 0x1032 <__divmodhi4>
     92c:	ac 01       	movw	r20, r24
     92e:	40 5d       	subi	r20, 0xD0	; 208
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	50 93 73 02 	sts	0x0273, r21
     936:	40 93 72 02 	sts	0x0272, r20
		lcd_wr_char(row, column, unit);
     93a:	8d 2f       	mov	r24, r29
     93c:	6c 2f       	mov	r22, r28
     93e:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		column+=1;
     942:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(digits > 5)
     944:	06 30       	cpi	r16, 0x06	; 6
     946:	11 05       	cpc	r17, r1
     948:	2c f0       	brlt	.+10     	; 0x954 <lcd_print+0x16e>
	{
		lcd_wr_char(row, column, 'E');
     94a:	8d 2f       	mov	r24, r29
     94c:	6c 2f       	mov	r22, r28
     94e:	45 e4       	ldi	r20, 0x45	; 69
     950:	0e 94 ad 03 	call	0x75a	; 0x75a <lcd_wr_char>
		column+=1;
	}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	08 95       	ret

00000962 <__subsf3>:
     962:	50 58       	subi	r21, 0x80	; 128

00000964 <__addsf3>:
     964:	bb 27       	eor	r27, r27
     966:	aa 27       	eor	r26, r26
     968:	0e d0       	rcall	.+28     	; 0x986 <__addsf3x>
     96a:	4d c1       	rjmp	.+666    	; 0xc06 <__fp_round>
     96c:	3e d1       	rcall	.+636    	; 0xbea <__fp_pscA>
     96e:	30 f0       	brcs	.+12     	; 0x97c <__addsf3+0x18>
     970:	43 d1       	rcall	.+646    	; 0xbf8 <__fp_pscB>
     972:	20 f0       	brcs	.+8      	; 0x97c <__addsf3+0x18>
     974:	31 f4       	brne	.+12     	; 0x982 <__addsf3+0x1e>
     976:	9f 3f       	cpi	r25, 0xFF	; 255
     978:	11 f4       	brne	.+4      	; 0x97e <__addsf3+0x1a>
     97a:	1e f4       	brtc	.+6      	; 0x982 <__addsf3+0x1e>
     97c:	33 c1       	rjmp	.+614    	; 0xbe4 <__fp_nan>
     97e:	0e f4       	brtc	.+2      	; 0x982 <__addsf3+0x1e>
     980:	e0 95       	com	r30
     982:	e7 fb       	bst	r30, 7
     984:	29 c1       	rjmp	.+594    	; 0xbd8 <__fp_inf>

00000986 <__addsf3x>:
     986:	e9 2f       	mov	r30, r25
     988:	4f d1       	rcall	.+670    	; 0xc28 <__fp_split3>
     98a:	80 f3       	brcs	.-32     	; 0x96c <__addsf3+0x8>
     98c:	ba 17       	cp	r27, r26
     98e:	62 07       	cpc	r22, r18
     990:	73 07       	cpc	r23, r19
     992:	84 07       	cpc	r24, r20
     994:	95 07       	cpc	r25, r21
     996:	18 f0       	brcs	.+6      	; 0x99e <__addsf3x+0x18>
     998:	71 f4       	brne	.+28     	; 0x9b6 <__addsf3x+0x30>
     99a:	9e f5       	brtc	.+102    	; 0xa02 <__addsf3x+0x7c>
     99c:	67 c1       	rjmp	.+718    	; 0xc6c <__fp_zero>
     99e:	0e f4       	brtc	.+2      	; 0x9a2 <__addsf3x+0x1c>
     9a0:	e0 95       	com	r30
     9a2:	0b 2e       	mov	r0, r27
     9a4:	ba 2f       	mov	r27, r26
     9a6:	a0 2d       	mov	r26, r0
     9a8:	0b 01       	movw	r0, r22
     9aa:	b9 01       	movw	r22, r18
     9ac:	90 01       	movw	r18, r0
     9ae:	0c 01       	movw	r0, r24
     9b0:	ca 01       	movw	r24, r20
     9b2:	a0 01       	movw	r20, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	ff 27       	eor	r31, r31
     9b8:	59 1b       	sub	r21, r25
     9ba:	99 f0       	breq	.+38     	; 0x9e2 <__addsf3x+0x5c>
     9bc:	59 3f       	cpi	r21, 0xF9	; 249
     9be:	50 f4       	brcc	.+20     	; 0x9d4 <__addsf3x+0x4e>
     9c0:	50 3e       	cpi	r21, 0xE0	; 224
     9c2:	68 f1       	brcs	.+90     	; 0xa1e <__addsf3x+0x98>
     9c4:	1a 16       	cp	r1, r26
     9c6:	f0 40       	sbci	r31, 0x00	; 0
     9c8:	a2 2f       	mov	r26, r18
     9ca:	23 2f       	mov	r18, r19
     9cc:	34 2f       	mov	r19, r20
     9ce:	44 27       	eor	r20, r20
     9d0:	58 5f       	subi	r21, 0xF8	; 248
     9d2:	f3 cf       	rjmp	.-26     	; 0x9ba <__addsf3x+0x34>
     9d4:	46 95       	lsr	r20
     9d6:	37 95       	ror	r19
     9d8:	27 95       	ror	r18
     9da:	a7 95       	ror	r26
     9dc:	f0 40       	sbci	r31, 0x00	; 0
     9de:	53 95       	inc	r21
     9e0:	c9 f7       	brne	.-14     	; 0x9d4 <__addsf3x+0x4e>
     9e2:	7e f4       	brtc	.+30     	; 0xa02 <__addsf3x+0x7c>
     9e4:	1f 16       	cp	r1, r31
     9e6:	ba 0b       	sbc	r27, r26
     9e8:	62 0b       	sbc	r22, r18
     9ea:	73 0b       	sbc	r23, r19
     9ec:	84 0b       	sbc	r24, r20
     9ee:	ba f0       	brmi	.+46     	; 0xa1e <__addsf3x+0x98>
     9f0:	91 50       	subi	r25, 0x01	; 1
     9f2:	a1 f0       	breq	.+40     	; 0xa1c <__addsf3x+0x96>
     9f4:	ff 0f       	add	r31, r31
     9f6:	bb 1f       	adc	r27, r27
     9f8:	66 1f       	adc	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	88 1f       	adc	r24, r24
     9fe:	c2 f7       	brpl	.-16     	; 0x9f0 <__addsf3x+0x6a>
     a00:	0e c0       	rjmp	.+28     	; 0xa1e <__addsf3x+0x98>
     a02:	ba 0f       	add	r27, r26
     a04:	62 1f       	adc	r22, r18
     a06:	73 1f       	adc	r23, r19
     a08:	84 1f       	adc	r24, r20
     a0a:	48 f4       	brcc	.+18     	; 0xa1e <__addsf3x+0x98>
     a0c:	87 95       	ror	r24
     a0e:	77 95       	ror	r23
     a10:	67 95       	ror	r22
     a12:	b7 95       	ror	r27
     a14:	f7 95       	ror	r31
     a16:	9e 3f       	cpi	r25, 0xFE	; 254
     a18:	08 f0       	brcs	.+2      	; 0xa1c <__addsf3x+0x96>
     a1a:	b3 cf       	rjmp	.-154    	; 0x982 <__addsf3+0x1e>
     a1c:	93 95       	inc	r25
     a1e:	88 0f       	add	r24, r24
     a20:	08 f0       	brcs	.+2      	; 0xa24 <__addsf3x+0x9e>
     a22:	99 27       	eor	r25, r25
     a24:	ee 0f       	add	r30, r30
     a26:	97 95       	ror	r25
     a28:	87 95       	ror	r24
     a2a:	08 95       	ret

00000a2c <__divsf3>:
     a2c:	0c d0       	rcall	.+24     	; 0xa46 <__divsf3x>
     a2e:	eb c0       	rjmp	.+470    	; 0xc06 <__fp_round>
     a30:	e3 d0       	rcall	.+454    	; 0xbf8 <__fp_pscB>
     a32:	40 f0       	brcs	.+16     	; 0xa44 <__divsf3+0x18>
     a34:	da d0       	rcall	.+436    	; 0xbea <__fp_pscA>
     a36:	30 f0       	brcs	.+12     	; 0xa44 <__divsf3+0x18>
     a38:	21 f4       	brne	.+8      	; 0xa42 <__divsf3+0x16>
     a3a:	5f 3f       	cpi	r21, 0xFF	; 255
     a3c:	19 f0       	breq	.+6      	; 0xa44 <__divsf3+0x18>
     a3e:	cc c0       	rjmp	.+408    	; 0xbd8 <__fp_inf>
     a40:	51 11       	cpse	r21, r1
     a42:	15 c1       	rjmp	.+554    	; 0xc6e <__fp_szero>
     a44:	cf c0       	rjmp	.+414    	; 0xbe4 <__fp_nan>

00000a46 <__divsf3x>:
     a46:	f0 d0       	rcall	.+480    	; 0xc28 <__fp_split3>
     a48:	98 f3       	brcs	.-26     	; 0xa30 <__divsf3+0x4>

00000a4a <__divsf3_pse>:
     a4a:	99 23       	and	r25, r25
     a4c:	c9 f3       	breq	.-14     	; 0xa40 <__divsf3+0x14>
     a4e:	55 23       	and	r21, r21
     a50:	b1 f3       	breq	.-20     	; 0xa3e <__divsf3+0x12>
     a52:	95 1b       	sub	r25, r21
     a54:	55 0b       	sbc	r21, r21
     a56:	bb 27       	eor	r27, r27
     a58:	aa 27       	eor	r26, r26
     a5a:	62 17       	cp	r22, r18
     a5c:	73 07       	cpc	r23, r19
     a5e:	84 07       	cpc	r24, r20
     a60:	38 f0       	brcs	.+14     	; 0xa70 <__divsf3_pse+0x26>
     a62:	9f 5f       	subi	r25, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	22 0f       	add	r18, r18
     a68:	33 1f       	adc	r19, r19
     a6a:	44 1f       	adc	r20, r20
     a6c:	aa 1f       	adc	r26, r26
     a6e:	a9 f3       	breq	.-22     	; 0xa5a <__divsf3_pse+0x10>
     a70:	33 d0       	rcall	.+102    	; 0xad8 <__divsf3_pse+0x8e>
     a72:	0e 2e       	mov	r0, r30
     a74:	3a f0       	brmi	.+14     	; 0xa84 <__divsf3_pse+0x3a>
     a76:	e0 e8       	ldi	r30, 0x80	; 128
     a78:	30 d0       	rcall	.+96     	; 0xada <__divsf3_pse+0x90>
     a7a:	91 50       	subi	r25, 0x01	; 1
     a7c:	50 40       	sbci	r21, 0x00	; 0
     a7e:	e6 95       	lsr	r30
     a80:	00 1c       	adc	r0, r0
     a82:	ca f7       	brpl	.-14     	; 0xa76 <__divsf3_pse+0x2c>
     a84:	29 d0       	rcall	.+82     	; 0xad8 <__divsf3_pse+0x8e>
     a86:	fe 2f       	mov	r31, r30
     a88:	27 d0       	rcall	.+78     	; 0xad8 <__divsf3_pse+0x8e>
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	88 1f       	adc	r24, r24
     a90:	bb 1f       	adc	r27, r27
     a92:	26 17       	cp	r18, r22
     a94:	37 07       	cpc	r19, r23
     a96:	48 07       	cpc	r20, r24
     a98:	ab 07       	cpc	r26, r27
     a9a:	b0 e8       	ldi	r27, 0x80	; 128
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <__divsf3_pse+0x56>
     a9e:	bb 0b       	sbc	r27, r27
     aa0:	80 2d       	mov	r24, r0
     aa2:	bf 01       	movw	r22, r30
     aa4:	ff 27       	eor	r31, r31
     aa6:	93 58       	subi	r25, 0x83	; 131
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	2a f0       	brmi	.+10     	; 0xab6 <__divsf3_pse+0x6c>
     aac:	9e 3f       	cpi	r25, 0xFE	; 254
     aae:	51 05       	cpc	r21, r1
     ab0:	68 f0       	brcs	.+26     	; 0xacc <__divsf3_pse+0x82>
     ab2:	92 c0       	rjmp	.+292    	; 0xbd8 <__fp_inf>
     ab4:	dc c0       	rjmp	.+440    	; 0xc6e <__fp_szero>
     ab6:	5f 3f       	cpi	r21, 0xFF	; 255
     ab8:	ec f3       	brlt	.-6      	; 0xab4 <__divsf3_pse+0x6a>
     aba:	98 3e       	cpi	r25, 0xE8	; 232
     abc:	dc f3       	brlt	.-10     	; 0xab4 <__divsf3_pse+0x6a>
     abe:	86 95       	lsr	r24
     ac0:	77 95       	ror	r23
     ac2:	67 95       	ror	r22
     ac4:	b7 95       	ror	r27
     ac6:	f7 95       	ror	r31
     ac8:	9f 5f       	subi	r25, 0xFF	; 255
     aca:	c9 f7       	brne	.-14     	; 0xabe <__divsf3_pse+0x74>
     acc:	88 0f       	add	r24, r24
     ace:	91 1d       	adc	r25, r1
     ad0:	96 95       	lsr	r25
     ad2:	87 95       	ror	r24
     ad4:	97 f9       	bld	r25, 7
     ad6:	08 95       	ret
     ad8:	e1 e0       	ldi	r30, 0x01	; 1
     ada:	66 0f       	add	r22, r22
     adc:	77 1f       	adc	r23, r23
     ade:	88 1f       	adc	r24, r24
     ae0:	bb 1f       	adc	r27, r27
     ae2:	62 17       	cp	r22, r18
     ae4:	73 07       	cpc	r23, r19
     ae6:	84 07       	cpc	r24, r20
     ae8:	ba 07       	cpc	r27, r26
     aea:	20 f0       	brcs	.+8      	; 0xaf4 <__divsf3_pse+0xaa>
     aec:	62 1b       	sub	r22, r18
     aee:	73 0b       	sbc	r23, r19
     af0:	84 0b       	sbc	r24, r20
     af2:	ba 0b       	sbc	r27, r26
     af4:	ee 1f       	adc	r30, r30
     af6:	88 f7       	brcc	.-30     	; 0xada <__divsf3_pse+0x90>
     af8:	e0 95       	com	r30
     afa:	08 95       	ret

00000afc <__fixsfsi>:
     afc:	04 d0       	rcall	.+8      	; 0xb06 <__fixunssfsi>
     afe:	68 94       	set
     b00:	b1 11       	cpse	r27, r1
     b02:	b5 c0       	rjmp	.+362    	; 0xc6e <__fp_szero>
     b04:	08 95       	ret

00000b06 <__fixunssfsi>:
     b06:	98 d0       	rcall	.+304    	; 0xc38 <__fp_splitA>
     b08:	88 f0       	brcs	.+34     	; 0xb2c <__fixunssfsi+0x26>
     b0a:	9f 57       	subi	r25, 0x7F	; 127
     b0c:	90 f0       	brcs	.+36     	; 0xb32 <__fixunssfsi+0x2c>
     b0e:	b9 2f       	mov	r27, r25
     b10:	99 27       	eor	r25, r25
     b12:	b7 51       	subi	r27, 0x17	; 23
     b14:	a0 f0       	brcs	.+40     	; 0xb3e <__fixunssfsi+0x38>
     b16:	d1 f0       	breq	.+52     	; 0xb4c <__fixunssfsi+0x46>
     b18:	66 0f       	add	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	88 1f       	adc	r24, r24
     b1e:	99 1f       	adc	r25, r25
     b20:	1a f0       	brmi	.+6      	; 0xb28 <__fixunssfsi+0x22>
     b22:	ba 95       	dec	r27
     b24:	c9 f7       	brne	.-14     	; 0xb18 <__fixunssfsi+0x12>
     b26:	12 c0       	rjmp	.+36     	; 0xb4c <__fixunssfsi+0x46>
     b28:	b1 30       	cpi	r27, 0x01	; 1
     b2a:	81 f0       	breq	.+32     	; 0xb4c <__fixunssfsi+0x46>
     b2c:	9f d0       	rcall	.+318    	; 0xc6c <__fp_zero>
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	08 95       	ret
     b32:	9c c0       	rjmp	.+312    	; 0xc6c <__fp_zero>
     b34:	67 2f       	mov	r22, r23
     b36:	78 2f       	mov	r23, r24
     b38:	88 27       	eor	r24, r24
     b3a:	b8 5f       	subi	r27, 0xF8	; 248
     b3c:	39 f0       	breq	.+14     	; 0xb4c <__fixunssfsi+0x46>
     b3e:	b9 3f       	cpi	r27, 0xF9	; 249
     b40:	cc f3       	brlt	.-14     	; 0xb34 <__fixunssfsi+0x2e>
     b42:	86 95       	lsr	r24
     b44:	77 95       	ror	r23
     b46:	67 95       	ror	r22
     b48:	b3 95       	inc	r27
     b4a:	d9 f7       	brne	.-10     	; 0xb42 <__fixunssfsi+0x3c>
     b4c:	3e f4       	brtc	.+14     	; 0xb5c <__fixunssfsi+0x56>
     b4e:	90 95       	com	r25
     b50:	80 95       	com	r24
     b52:	70 95       	com	r23
     b54:	61 95       	neg	r22
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	8f 4f       	sbci	r24, 0xFF	; 255
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	08 95       	ret

00000b5e <__floatunsisf>:
     b5e:	e8 94       	clt
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <__floatsisf+0x12>

00000b62 <__floatsisf>:
     b62:	97 fb       	bst	r25, 7
     b64:	3e f4       	brtc	.+14     	; 0xb74 <__floatsisf+0x12>
     b66:	90 95       	com	r25
     b68:	80 95       	com	r24
     b6a:	70 95       	com	r23
     b6c:	61 95       	neg	r22
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	8f 4f       	sbci	r24, 0xFF	; 255
     b72:	9f 4f       	sbci	r25, 0xFF	; 255
     b74:	99 23       	and	r25, r25
     b76:	a9 f0       	breq	.+42     	; 0xba2 <__floatsisf+0x40>
     b78:	f9 2f       	mov	r31, r25
     b7a:	96 e9       	ldi	r25, 0x96	; 150
     b7c:	bb 27       	eor	r27, r27
     b7e:	93 95       	inc	r25
     b80:	f6 95       	lsr	r31
     b82:	87 95       	ror	r24
     b84:	77 95       	ror	r23
     b86:	67 95       	ror	r22
     b88:	b7 95       	ror	r27
     b8a:	f1 11       	cpse	r31, r1
     b8c:	f8 cf       	rjmp	.-16     	; 0xb7e <__floatsisf+0x1c>
     b8e:	fa f4       	brpl	.+62     	; 0xbce <__floatsisf+0x6c>
     b90:	bb 0f       	add	r27, r27
     b92:	11 f4       	brne	.+4      	; 0xb98 <__floatsisf+0x36>
     b94:	60 ff       	sbrs	r22, 0
     b96:	1b c0       	rjmp	.+54     	; 0xbce <__floatsisf+0x6c>
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	8f 4f       	sbci	r24, 0xFF	; 255
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	16 c0       	rjmp	.+44     	; 0xbce <__floatsisf+0x6c>
     ba2:	88 23       	and	r24, r24
     ba4:	11 f0       	breq	.+4      	; 0xbaa <__floatsisf+0x48>
     ba6:	96 e9       	ldi	r25, 0x96	; 150
     ba8:	11 c0       	rjmp	.+34     	; 0xbcc <__floatsisf+0x6a>
     baa:	77 23       	and	r23, r23
     bac:	21 f0       	breq	.+8      	; 0xbb6 <__floatsisf+0x54>
     bae:	9e e8       	ldi	r25, 0x8E	; 142
     bb0:	87 2f       	mov	r24, r23
     bb2:	76 2f       	mov	r23, r22
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <__floatsisf+0x5e>
     bb6:	66 23       	and	r22, r22
     bb8:	71 f0       	breq	.+28     	; 0xbd6 <__floatsisf+0x74>
     bba:	96 e8       	ldi	r25, 0x86	; 134
     bbc:	86 2f       	mov	r24, r22
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	2a f0       	brmi	.+10     	; 0xbce <__floatsisf+0x6c>
     bc4:	9a 95       	dec	r25
     bc6:	66 0f       	add	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	88 1f       	adc	r24, r24
     bcc:	da f7       	brpl	.-10     	; 0xbc4 <__floatsisf+0x62>
     bce:	88 0f       	add	r24, r24
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	97 f9       	bld	r25, 7
     bd6:	08 95       	ret

00000bd8 <__fp_inf>:
     bd8:	97 f9       	bld	r25, 7
     bda:	9f 67       	ori	r25, 0x7F	; 127
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	08 95       	ret

00000be4 <__fp_nan>:
     be4:	9f ef       	ldi	r25, 0xFF	; 255
     be6:	80 ec       	ldi	r24, 0xC0	; 192
     be8:	08 95       	ret

00000bea <__fp_pscA>:
     bea:	00 24       	eor	r0, r0
     bec:	0a 94       	dec	r0
     bee:	16 16       	cp	r1, r22
     bf0:	17 06       	cpc	r1, r23
     bf2:	18 06       	cpc	r1, r24
     bf4:	09 06       	cpc	r0, r25
     bf6:	08 95       	ret

00000bf8 <__fp_pscB>:
     bf8:	00 24       	eor	r0, r0
     bfa:	0a 94       	dec	r0
     bfc:	12 16       	cp	r1, r18
     bfe:	13 06       	cpc	r1, r19
     c00:	14 06       	cpc	r1, r20
     c02:	05 06       	cpc	r0, r21
     c04:	08 95       	ret

00000c06 <__fp_round>:
     c06:	09 2e       	mov	r0, r25
     c08:	03 94       	inc	r0
     c0a:	00 0c       	add	r0, r0
     c0c:	11 f4       	brne	.+4      	; 0xc12 <__fp_round+0xc>
     c0e:	88 23       	and	r24, r24
     c10:	52 f0       	brmi	.+20     	; 0xc26 <__fp_round+0x20>
     c12:	bb 0f       	add	r27, r27
     c14:	40 f4       	brcc	.+16     	; 0xc26 <__fp_round+0x20>
     c16:	bf 2b       	or	r27, r31
     c18:	11 f4       	brne	.+4      	; 0xc1e <__fp_round+0x18>
     c1a:	60 ff       	sbrs	r22, 0
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__fp_round+0x20>
     c1e:	6f 5f       	subi	r22, 0xFF	; 255
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	8f 4f       	sbci	r24, 0xFF	; 255
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	08 95       	ret

00000c28 <__fp_split3>:
     c28:	57 fd       	sbrc	r21, 7
     c2a:	90 58       	subi	r25, 0x80	; 128
     c2c:	44 0f       	add	r20, r20
     c2e:	55 1f       	adc	r21, r21
     c30:	59 f0       	breq	.+22     	; 0xc48 <__fp_splitA+0x10>
     c32:	5f 3f       	cpi	r21, 0xFF	; 255
     c34:	71 f0       	breq	.+28     	; 0xc52 <__fp_splitA+0x1a>
     c36:	47 95       	ror	r20

00000c38 <__fp_splitA>:
     c38:	88 0f       	add	r24, r24
     c3a:	97 fb       	bst	r25, 7
     c3c:	99 1f       	adc	r25, r25
     c3e:	61 f0       	breq	.+24     	; 0xc58 <__fp_splitA+0x20>
     c40:	9f 3f       	cpi	r25, 0xFF	; 255
     c42:	79 f0       	breq	.+30     	; 0xc62 <__fp_splitA+0x2a>
     c44:	87 95       	ror	r24
     c46:	08 95       	ret
     c48:	12 16       	cp	r1, r18
     c4a:	13 06       	cpc	r1, r19
     c4c:	14 06       	cpc	r1, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	f2 cf       	rjmp	.-28     	; 0xc36 <__fp_split3+0xe>
     c52:	46 95       	lsr	r20
     c54:	f1 df       	rcall	.-30     	; 0xc38 <__fp_splitA>
     c56:	08 c0       	rjmp	.+16     	; 0xc68 <__fp_splitA+0x30>
     c58:	16 16       	cp	r1, r22
     c5a:	17 06       	cpc	r1, r23
     c5c:	18 06       	cpc	r1, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	f1 cf       	rjmp	.-30     	; 0xc44 <__fp_splitA+0xc>
     c62:	86 95       	lsr	r24
     c64:	71 05       	cpc	r23, r1
     c66:	61 05       	cpc	r22, r1
     c68:	08 94       	sec
     c6a:	08 95       	ret

00000c6c <__fp_zero>:
     c6c:	e8 94       	clt

00000c6e <__fp_szero>:
     c6e:	bb 27       	eor	r27, r27
     c70:	66 27       	eor	r22, r22
     c72:	77 27       	eor	r23, r23
     c74:	cb 01       	movw	r24, r22
     c76:	97 f9       	bld	r25, 7
     c78:	08 95       	ret
     c7a:	0e f0       	brts	.+2      	; 0xc7e <__fp_szero+0x10>
     c7c:	23 c1       	rjmp	.+582    	; 0xec4 <__fp_mpack>
     c7e:	b2 cf       	rjmp	.-156    	; 0xbe4 <__fp_nan>
     c80:	68 94       	set
     c82:	aa cf       	rjmp	.-172    	; 0xbd8 <__fp_inf>

00000c84 <log>:
     c84:	d9 df       	rcall	.-78     	; 0xc38 <__fp_splitA>
     c86:	c8 f3       	brcs	.-14     	; 0xc7a <__fp_szero+0xc>
     c88:	99 23       	and	r25, r25
     c8a:	d1 f3       	breq	.-12     	; 0xc80 <__fp_szero+0x12>
     c8c:	c6 f3       	brts	.-16     	; 0xc7e <__fp_szero+0x10>
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	1f 93       	push	r17
     c94:	0f 93       	push	r16
     c96:	ff 92       	push	r15
     c98:	c9 2f       	mov	r28, r25
     c9a:	dd 27       	eor	r29, r29
     c9c:	88 23       	and	r24, r24
     c9e:	2a f0       	brmi	.+10     	; 0xcaa <log+0x26>
     ca0:	21 97       	sbiw	r28, 0x01	; 1
     ca2:	66 0f       	add	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	88 1f       	adc	r24, r24
     ca8:	da f7       	brpl	.-10     	; 0xca0 <log+0x1c>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e8       	ldi	r20, 0x80	; 128
     cb0:	5f eb       	ldi	r21, 0xBF	; 191
     cb2:	9f e3       	ldi	r25, 0x3F	; 63
     cb4:	88 39       	cpi	r24, 0x98	; 152
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <log+0x3c>
     cb8:	80 3e       	cpi	r24, 0xE0	; 224
     cba:	30 f0       	brcs	.+12     	; 0xcc8 <log+0x44>
     cbc:	21 96       	adiw	r28, 0x01	; 1
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	51 de       	rcall	.-862    	; 0x964 <__addsf3>
     cc2:	e4 ee       	ldi	r30, 0xE4	; 228
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <log+0x4a>
     cc8:	4d de       	rcall	.-870    	; 0x964 <__addsf3>
     cca:	e1 e1       	ldi	r30, 0x11	; 17
     ccc:	f1 e0       	ldi	r31, 0x01	; 1
     cce:	08 d1       	rcall	.+528    	; 0xee0 <__fp_powser>
     cd0:	8b 01       	movw	r16, r22
     cd2:	be 01       	movw	r22, r28
     cd4:	ec 01       	movw	r28, r24
     cd6:	fb 2e       	mov	r15, r27
     cd8:	6f 57       	subi	r22, 0x7F	; 127
     cda:	71 09       	sbc	r23, r1
     cdc:	75 95       	asr	r23
     cde:	77 1f       	adc	r23, r23
     ce0:	88 0b       	sbc	r24, r24
     ce2:	99 0b       	sbc	r25, r25
     ce4:	3e df       	rcall	.-388    	; 0xb62 <__floatsisf>
     ce6:	28 e1       	ldi	r18, 0x18	; 24
     ce8:	32 e7       	ldi	r19, 0x72	; 114
     cea:	41 e3       	ldi	r20, 0x31	; 49
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	16 d0       	rcall	.+44     	; 0xd1c <__mulsf3x>
     cf0:	af 2d       	mov	r26, r15
     cf2:	98 01       	movw	r18, r16
     cf4:	ae 01       	movw	r20, r28
     cf6:	ff 90       	pop	r15
     cf8:	0f 91       	pop	r16
     cfa:	1f 91       	pop	r17
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	42 de       	rcall	.-892    	; 0x986 <__addsf3x>
     d02:	81 cf       	rjmp	.-254    	; 0xc06 <__fp_round>

00000d04 <__mulsf3>:
     d04:	0b d0       	rcall	.+22     	; 0xd1c <__mulsf3x>
     d06:	7f cf       	rjmp	.-258    	; 0xc06 <__fp_round>
     d08:	70 df       	rcall	.-288    	; 0xbea <__fp_pscA>
     d0a:	28 f0       	brcs	.+10     	; 0xd16 <__mulsf3+0x12>
     d0c:	75 df       	rcall	.-278    	; 0xbf8 <__fp_pscB>
     d0e:	18 f0       	brcs	.+6      	; 0xd16 <__mulsf3+0x12>
     d10:	95 23       	and	r25, r21
     d12:	09 f0       	breq	.+2      	; 0xd16 <__mulsf3+0x12>
     d14:	61 cf       	rjmp	.-318    	; 0xbd8 <__fp_inf>
     d16:	66 cf       	rjmp	.-308    	; 0xbe4 <__fp_nan>
     d18:	11 24       	eor	r1, r1
     d1a:	a9 cf       	rjmp	.-174    	; 0xc6e <__fp_szero>

00000d1c <__mulsf3x>:
     d1c:	85 df       	rcall	.-246    	; 0xc28 <__fp_split3>
     d1e:	a0 f3       	brcs	.-24     	; 0xd08 <__mulsf3+0x4>

00000d20 <__mulsf3_pse>:
     d20:	95 9f       	mul	r25, r21
     d22:	d1 f3       	breq	.-12     	; 0xd18 <__mulsf3+0x14>
     d24:	95 0f       	add	r25, r21
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	55 1f       	adc	r21, r21
     d2a:	62 9f       	mul	r22, r18
     d2c:	f0 01       	movw	r30, r0
     d2e:	72 9f       	mul	r23, r18
     d30:	bb 27       	eor	r27, r27
     d32:	f0 0d       	add	r31, r0
     d34:	b1 1d       	adc	r27, r1
     d36:	63 9f       	mul	r22, r19
     d38:	aa 27       	eor	r26, r26
     d3a:	f0 0d       	add	r31, r0
     d3c:	b1 1d       	adc	r27, r1
     d3e:	aa 1f       	adc	r26, r26
     d40:	64 9f       	mul	r22, r20
     d42:	66 27       	eor	r22, r22
     d44:	b0 0d       	add	r27, r0
     d46:	a1 1d       	adc	r26, r1
     d48:	66 1f       	adc	r22, r22
     d4a:	82 9f       	mul	r24, r18
     d4c:	22 27       	eor	r18, r18
     d4e:	b0 0d       	add	r27, r0
     d50:	a1 1d       	adc	r26, r1
     d52:	62 1f       	adc	r22, r18
     d54:	73 9f       	mul	r23, r19
     d56:	b0 0d       	add	r27, r0
     d58:	a1 1d       	adc	r26, r1
     d5a:	62 1f       	adc	r22, r18
     d5c:	83 9f       	mul	r24, r19
     d5e:	a0 0d       	add	r26, r0
     d60:	61 1d       	adc	r22, r1
     d62:	22 1f       	adc	r18, r18
     d64:	74 9f       	mul	r23, r20
     d66:	33 27       	eor	r19, r19
     d68:	a0 0d       	add	r26, r0
     d6a:	61 1d       	adc	r22, r1
     d6c:	23 1f       	adc	r18, r19
     d6e:	84 9f       	mul	r24, r20
     d70:	60 0d       	add	r22, r0
     d72:	21 1d       	adc	r18, r1
     d74:	82 2f       	mov	r24, r18
     d76:	76 2f       	mov	r23, r22
     d78:	6a 2f       	mov	r22, r26
     d7a:	11 24       	eor	r1, r1
     d7c:	9f 57       	subi	r25, 0x7F	; 127
     d7e:	50 40       	sbci	r21, 0x00	; 0
     d80:	8a f0       	brmi	.+34     	; 0xda4 <__mulsf3_pse+0x84>
     d82:	e1 f0       	breq	.+56     	; 0xdbc <__mulsf3_pse+0x9c>
     d84:	88 23       	and	r24, r24
     d86:	4a f0       	brmi	.+18     	; 0xd9a <__mulsf3_pse+0x7a>
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	bb 1f       	adc	r27, r27
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	50 40       	sbci	r21, 0x00	; 0
     d98:	a9 f7       	brne	.-22     	; 0xd84 <__mulsf3_pse+0x64>
     d9a:	9e 3f       	cpi	r25, 0xFE	; 254
     d9c:	51 05       	cpc	r21, r1
     d9e:	70 f0       	brcs	.+28     	; 0xdbc <__mulsf3_pse+0x9c>
     da0:	1b cf       	rjmp	.-458    	; 0xbd8 <__fp_inf>
     da2:	65 cf       	rjmp	.-310    	; 0xc6e <__fp_szero>
     da4:	5f 3f       	cpi	r21, 0xFF	; 255
     da6:	ec f3       	brlt	.-6      	; 0xda2 <__mulsf3_pse+0x82>
     da8:	98 3e       	cpi	r25, 0xE8	; 232
     daa:	dc f3       	brlt	.-10     	; 0xda2 <__mulsf3_pse+0x82>
     dac:	86 95       	lsr	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b7 95       	ror	r27
     db4:	f7 95       	ror	r31
     db6:	e7 95       	ror	r30
     db8:	9f 5f       	subi	r25, 0xFF	; 255
     dba:	c1 f7       	brne	.-16     	; 0xdac <__mulsf3_pse+0x8c>
     dbc:	fe 2b       	or	r31, r30
     dbe:	88 0f       	add	r24, r24
     dc0:	91 1d       	adc	r25, r1
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	97 f9       	bld	r25, 7
     dc8:	08 95       	ret

00000dca <pow>:
     dca:	fa 01       	movw	r30, r20
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	30 96       	adiw	r30, 0x00	; 0
     dd2:	21 05       	cpc	r18, r1
     dd4:	31 05       	cpc	r19, r1
     dd6:	99 f1       	breq	.+102    	; 0xe3e <pow+0x74>
     dd8:	61 15       	cp	r22, r1
     dda:	71 05       	cpc	r23, r1
     ddc:	61 f4       	brne	.+24     	; 0xdf6 <pow+0x2c>
     dde:	80 38       	cpi	r24, 0x80	; 128
     de0:	bf e3       	ldi	r27, 0x3F	; 63
     de2:	9b 07       	cpc	r25, r27
     de4:	49 f1       	breq	.+82     	; 0xe38 <pow+0x6e>
     de6:	68 94       	set
     de8:	90 38       	cpi	r25, 0x80	; 128
     dea:	81 05       	cpc	r24, r1
     dec:	61 f0       	breq	.+24     	; 0xe06 <pow+0x3c>
     dee:	80 38       	cpi	r24, 0x80	; 128
     df0:	bf ef       	ldi	r27, 0xFF	; 255
     df2:	9b 07       	cpc	r25, r27
     df4:	41 f0       	breq	.+16     	; 0xe06 <pow+0x3c>
     df6:	99 23       	and	r25, r25
     df8:	42 f5       	brpl	.+80     	; 0xe4a <pow+0x80>
     dfa:	ff 3f       	cpi	r31, 0xFF	; 255
     dfc:	e1 05       	cpc	r30, r1
     dfe:	31 05       	cpc	r19, r1
     e00:	21 05       	cpc	r18, r1
     e02:	11 f1       	breq	.+68     	; 0xe48 <pow+0x7e>
     e04:	e8 94       	clt
     e06:	08 94       	sec
     e08:	e7 95       	ror	r30
     e0a:	d9 01       	movw	r26, r18
     e0c:	aa 23       	and	r26, r26
     e0e:	29 f4       	brne	.+10     	; 0xe1a <pow+0x50>
     e10:	ab 2f       	mov	r26, r27
     e12:	be 2f       	mov	r27, r30
     e14:	f8 5f       	subi	r31, 0xF8	; 248
     e16:	d0 f3       	brcs	.-12     	; 0xe0c <pow+0x42>
     e18:	10 c0       	rjmp	.+32     	; 0xe3a <pow+0x70>
     e1a:	ff 5f       	subi	r31, 0xFF	; 255
     e1c:	70 f4       	brcc	.+28     	; 0xe3a <pow+0x70>
     e1e:	a6 95       	lsr	r26
     e20:	e0 f7       	brcc	.-8      	; 0xe1a <pow+0x50>
     e22:	f7 39       	cpi	r31, 0x97	; 151
     e24:	50 f0       	brcs	.+20     	; 0xe3a <pow+0x70>
     e26:	19 f0       	breq	.+6      	; 0xe2e <pow+0x64>
     e28:	ff 3a       	cpi	r31, 0xAF	; 175
     e2a:	38 f4       	brcc	.+14     	; 0xe3a <pow+0x70>
     e2c:	9f 77       	andi	r25, 0x7F	; 127
     e2e:	9f 93       	push	r25
     e30:	0c d0       	rcall	.+24     	; 0xe4a <pow+0x80>
     e32:	0f 90       	pop	r0
     e34:	07 fc       	sbrc	r0, 7
     e36:	90 58       	subi	r25, 0x80	; 128
     e38:	08 95       	ret
     e3a:	3e f0       	brts	.+14     	; 0xe4a <pow+0x80>
     e3c:	d3 ce       	rjmp	.-602    	; 0xbe4 <__fp_nan>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 e8       	ldi	r24, 0x80	; 128
     e44:	9f e3       	ldi	r25, 0x3F	; 63
     e46:	08 95       	ret
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	9f 77       	andi	r25, 0x7F	; 127
     e4c:	5f 93       	push	r21
     e4e:	4f 93       	push	r20
     e50:	3f 93       	push	r19
     e52:	2f 93       	push	r18
     e54:	17 df       	rcall	.-466    	; 0xc84 <log>
     e56:	2f 91       	pop	r18
     e58:	3f 91       	pop	r19
     e5a:	4f 91       	pop	r20
     e5c:	5f 91       	pop	r21
     e5e:	52 df       	rcall	.-348    	; 0xd04 <__mulsf3>
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <exp>
     e62:	19 f4       	brne	.+6      	; 0xe6a <pow+0xa0>
     e64:	0e f0       	brts	.+2      	; 0xe68 <pow+0x9e>
     e66:	b8 ce       	rjmp	.-656    	; 0xbd8 <__fp_inf>
     e68:	01 cf       	rjmp	.-510    	; 0xc6c <__fp_zero>
     e6a:	bc ce       	rjmp	.-648    	; 0xbe4 <__fp_nan>

00000e6c <exp>:
     e6c:	e5 de       	rcall	.-566    	; 0xc38 <__fp_splitA>
     e6e:	c8 f3       	brcs	.-14     	; 0xe62 <pow+0x98>
     e70:	96 38       	cpi	r25, 0x86	; 134
     e72:	c0 f7       	brcc	.-16     	; 0xe64 <pow+0x9a>
     e74:	07 f8       	bld	r0, 7
     e76:	0f 92       	push	r0
     e78:	e8 94       	clt
     e7a:	2b e3       	ldi	r18, 0x3B	; 59
     e7c:	3a ea       	ldi	r19, 0xAA	; 170
     e7e:	48 eb       	ldi	r20, 0xB8	; 184
     e80:	5f e7       	ldi	r21, 0x7F	; 127
     e82:	4e df       	rcall	.-356    	; 0xd20 <__mulsf3_pse>
     e84:	0f 92       	push	r0
     e86:	0f 92       	push	r0
     e88:	0f 92       	push	r0
     e8a:	4d b7       	in	r20, 0x3d	; 61
     e8c:	5e b7       	in	r21, 0x3e	; 62
     e8e:	0f 92       	push	r0
     e90:	89 d0       	rcall	.+274    	; 0xfa4 <modf>
     e92:	ee e3       	ldi	r30, 0x3E	; 62
     e94:	f1 e0       	ldi	r31, 0x01	; 1
     e96:	24 d0       	rcall	.+72     	; 0xee0 <__fp_powser>
     e98:	4f 91       	pop	r20
     e9a:	5f 91       	pop	r21
     e9c:	ef 91       	pop	r30
     e9e:	ff 91       	pop	r31
     ea0:	e5 95       	asr	r30
     ea2:	ee 1f       	adc	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	49 f0       	breq	.+18     	; 0xeba <exp+0x4e>
     ea8:	fe 57       	subi	r31, 0x7E	; 126
     eaa:	e0 68       	ori	r30, 0x80	; 128
     eac:	44 27       	eor	r20, r20
     eae:	ee 0f       	add	r30, r30
     eb0:	44 1f       	adc	r20, r20
     eb2:	fa 95       	dec	r31
     eb4:	e1 f7       	brne	.-8      	; 0xeae <exp+0x42>
     eb6:	41 95       	neg	r20
     eb8:	55 0b       	sbc	r21, r21
     eba:	40 d0       	rcall	.+128    	; 0xf3c <ldexp>
     ebc:	0f 90       	pop	r0
     ebe:	07 fe       	sbrs	r0, 7
     ec0:	34 c0       	rjmp	.+104    	; 0xf2a <inverse>
     ec2:	08 95       	ret

00000ec4 <__fp_mpack>:
     ec4:	9f 3f       	cpi	r25, 0xFF	; 255
     ec6:	31 f0       	breq	.+12     	; 0xed4 <__fp_mpack_finite+0xc>

00000ec8 <__fp_mpack_finite>:
     ec8:	91 50       	subi	r25, 0x01	; 1
     eca:	20 f4       	brcc	.+8      	; 0xed4 <__fp_mpack_finite+0xc>
     ecc:	87 95       	ror	r24
     ece:	77 95       	ror	r23
     ed0:	67 95       	ror	r22
     ed2:	b7 95       	ror	r27
     ed4:	88 0f       	add	r24, r24
     ed6:	91 1d       	adc	r25, r1
     ed8:	96 95       	lsr	r25
     eda:	87 95       	ror	r24
     edc:	97 f9       	bld	r25, 7
     ede:	08 95       	ret

00000ee0 <__fp_powser>:
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	1f 93       	push	r17
     ee6:	0f 93       	push	r16
     ee8:	ff 92       	push	r15
     eea:	ef 92       	push	r14
     eec:	df 92       	push	r13
     eee:	7b 01       	movw	r14, r22
     ef0:	8c 01       	movw	r16, r24
     ef2:	68 94       	set
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <__fp_powser+0x20>
     ef6:	da 2e       	mov	r13, r26
     ef8:	ef 01       	movw	r28, r30
     efa:	10 df       	rcall	.-480    	; 0xd1c <__mulsf3x>
     efc:	fe 01       	movw	r30, r28
     efe:	e8 94       	clt
     f00:	a5 91       	lpm	r26, Z+
     f02:	25 91       	lpm	r18, Z+
     f04:	35 91       	lpm	r19, Z+
     f06:	45 91       	lpm	r20, Z+
     f08:	55 91       	lpm	r21, Z+
     f0a:	ae f3       	brts	.-22     	; 0xef6 <__fp_powser+0x16>
     f0c:	ef 01       	movw	r28, r30
     f0e:	3b dd       	rcall	.-1418   	; 0x986 <__addsf3x>
     f10:	fe 01       	movw	r30, r28
     f12:	97 01       	movw	r18, r14
     f14:	a8 01       	movw	r20, r16
     f16:	da 94       	dec	r13
     f18:	79 f7       	brne	.-34     	; 0xef8 <__fp_powser+0x18>
     f1a:	df 90       	pop	r13
     f1c:	ef 90       	pop	r14
     f1e:	ff 90       	pop	r15
     f20:	0f 91       	pop	r16
     f22:	1f 91       	pop	r17
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <inverse>:
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	9f e3       	ldi	r25, 0x3F	; 63
     f36:	7a cd       	rjmp	.-1292   	; 0xa2c <__divsf3>
     f38:	4f ce       	rjmp	.-866    	; 0xbd8 <__fp_inf>
     f3a:	c4 cf       	rjmp	.-120    	; 0xec4 <__fp_mpack>

00000f3c <ldexp>:
     f3c:	7d de       	rcall	.-774    	; 0xc38 <__fp_splitA>
     f3e:	e8 f3       	brcs	.-6      	; 0xf3a <inverse+0x10>
     f40:	99 23       	and	r25, r25
     f42:	d9 f3       	breq	.-10     	; 0xf3a <inverse+0x10>
     f44:	94 0f       	add	r25, r20
     f46:	51 1d       	adc	r21, r1
     f48:	bb f3       	brvs	.-18     	; 0xf38 <inverse+0xe>
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	50 40       	sbci	r21, 0x00	; 0
     f4e:	94 f0       	brlt	.+36     	; 0xf74 <ldexp+0x38>
     f50:	59 f0       	breq	.+22     	; 0xf68 <ldexp+0x2c>
     f52:	88 23       	and	r24, r24
     f54:	32 f0       	brmi	.+12     	; 0xf62 <ldexp+0x26>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	91 50       	subi	r25, 0x01	; 1
     f5e:	50 40       	sbci	r21, 0x00	; 0
     f60:	c1 f7       	brne	.-16     	; 0xf52 <ldexp+0x16>
     f62:	9e 3f       	cpi	r25, 0xFE	; 254
     f64:	51 05       	cpc	r21, r1
     f66:	44 f7       	brge	.-48     	; 0xf38 <inverse+0xe>
     f68:	88 0f       	add	r24, r24
     f6a:	91 1d       	adc	r25, r1
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	97 f9       	bld	r25, 7
     f72:	08 95       	ret
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	ac f0       	brlt	.+42     	; 0xfa2 <ldexp+0x66>
     f78:	98 3e       	cpi	r25, 0xE8	; 232
     f7a:	9c f0       	brlt	.+38     	; 0xfa2 <ldexp+0x66>
     f7c:	bb 27       	eor	r27, r27
     f7e:	86 95       	lsr	r24
     f80:	77 95       	ror	r23
     f82:	67 95       	ror	r22
     f84:	b7 95       	ror	r27
     f86:	08 f4       	brcc	.+2      	; 0xf8a <ldexp+0x4e>
     f88:	b1 60       	ori	r27, 0x01	; 1
     f8a:	93 95       	inc	r25
     f8c:	c1 f7       	brne	.-16     	; 0xf7e <ldexp+0x42>
     f8e:	bb 0f       	add	r27, r27
     f90:	58 f7       	brcc	.-42     	; 0xf68 <ldexp+0x2c>
     f92:	11 f4       	brne	.+4      	; 0xf98 <ldexp+0x5c>
     f94:	60 ff       	sbrs	r22, 0
     f96:	e8 cf       	rjmp	.-48     	; 0xf68 <ldexp+0x2c>
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	e3 cf       	rjmp	.-58     	; 0xf68 <ldexp+0x2c>
     fa2:	65 ce       	rjmp	.-822    	; 0xc6e <__fp_szero>

00000fa4 <modf>:
     fa4:	fa 01       	movw	r30, r20
     fa6:	dc 01       	movw	r26, r24
     fa8:	aa 0f       	add	r26, r26
     faa:	bb 1f       	adc	r27, r27
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	bf 57       	subi	r27, 0x7F	; 127
     fb2:	28 f4       	brcc	.+10     	; 0xfbe <modf+0x1a>
     fb4:	22 27       	eor	r18, r18
     fb6:	33 27       	eor	r19, r19
     fb8:	44 27       	eor	r20, r20
     fba:	50 78       	andi	r21, 0x80	; 128
     fbc:	1f c0       	rjmp	.+62     	; 0xffc <modf+0x58>
     fbe:	b7 51       	subi	r27, 0x17	; 23
     fc0:	88 f4       	brcc	.+34     	; 0xfe4 <modf+0x40>
     fc2:	ab 2f       	mov	r26, r27
     fc4:	00 24       	eor	r0, r0
     fc6:	46 95       	lsr	r20
     fc8:	37 95       	ror	r19
     fca:	27 95       	ror	r18
     fcc:	01 1c       	adc	r0, r1
     fce:	a3 95       	inc	r26
     fd0:	d2 f3       	brmi	.-12     	; 0xfc6 <modf+0x22>
     fd2:	00 20       	and	r0, r0
     fd4:	69 f0       	breq	.+26     	; 0xff0 <modf+0x4c>
     fd6:	22 0f       	add	r18, r18
     fd8:	33 1f       	adc	r19, r19
     fda:	44 1f       	adc	r20, r20
     fdc:	b3 95       	inc	r27
     fde:	da f3       	brmi	.-10     	; 0xfd6 <modf+0x32>
     fe0:	0d d0       	rcall	.+26     	; 0xffc <modf+0x58>
     fe2:	bf cc       	rjmp	.-1666   	; 0x962 <__subsf3>
     fe4:	61 30       	cpi	r22, 0x01	; 1
     fe6:	71 05       	cpc	r23, r1
     fe8:	a0 e8       	ldi	r26, 0x80	; 128
     fea:	8a 07       	cpc	r24, r26
     fec:	b9 46       	sbci	r27, 0x69	; 105
     fee:	30 f4       	brcc	.+12     	; 0xffc <modf+0x58>
     ff0:	9b 01       	movw	r18, r22
     ff2:	ac 01       	movw	r20, r24
     ff4:	66 27       	eor	r22, r22
     ff6:	77 27       	eor	r23, r23
     ff8:	88 27       	eor	r24, r24
     ffa:	90 78       	andi	r25, 0x80	; 128
     ffc:	30 96       	adiw	r30, 0x00	; 0
     ffe:	21 f0       	breq	.+8      	; 0x1008 <modf+0x64>
    1000:	20 83       	st	Z, r18
    1002:	31 83       	std	Z+1, r19	; 0x01
    1004:	42 83       	std	Z+2, r20	; 0x02
    1006:	53 83       	std	Z+3, r21	; 0x03
    1008:	08 95       	ret

0000100a <__udivmodhi4>:
    100a:	aa 1b       	sub	r26, r26
    100c:	bb 1b       	sub	r27, r27
    100e:	51 e1       	ldi	r21, 0x11	; 17
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <__udivmodhi4_ep>

00001012 <__udivmodhi4_loop>:
    1012:	aa 1f       	adc	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	a6 17       	cp	r26, r22
    1018:	b7 07       	cpc	r27, r23
    101a:	10 f0       	brcs	.+4      	; 0x1020 <__udivmodhi4_ep>
    101c:	a6 1b       	sub	r26, r22
    101e:	b7 0b       	sbc	r27, r23

00001020 <__udivmodhi4_ep>:
    1020:	88 1f       	adc	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	5a 95       	dec	r21
    1026:	a9 f7       	brne	.-22     	; 0x1012 <__udivmodhi4_loop>
    1028:	80 95       	com	r24
    102a:	90 95       	com	r25
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	08 95       	ret

00001032 <__divmodhi4>:
    1032:	97 fb       	bst	r25, 7
    1034:	09 2e       	mov	r0, r25
    1036:	07 26       	eor	r0, r23
    1038:	0a d0       	rcall	.+20     	; 0x104e <__divmodhi4_neg1>
    103a:	77 fd       	sbrc	r23, 7
    103c:	04 d0       	rcall	.+8      	; 0x1046 <__divmodhi4_neg2>
    103e:	e5 df       	rcall	.-54     	; 0x100a <__udivmodhi4>
    1040:	06 d0       	rcall	.+12     	; 0x104e <__divmodhi4_neg1>
    1042:	00 20       	and	r0, r0
    1044:	1a f4       	brpl	.+6      	; 0x104c <__divmodhi4_exit>

00001046 <__divmodhi4_neg2>:
    1046:	70 95       	com	r23
    1048:	61 95       	neg	r22
    104a:	7f 4f       	sbci	r23, 0xFF	; 255

0000104c <__divmodhi4_exit>:
    104c:	08 95       	ret

0000104e <__divmodhi4_neg1>:
    104e:	f6 f7       	brtc	.-4      	; 0x104c <__divmodhi4_exit>
    1050:	90 95       	com	r25
    1052:	81 95       	neg	r24
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	08 95       	ret

00001058 <_exit>:
    1058:	f8 94       	cli

0000105a <__stop_program>:
    105a:	ff cf       	rjmp	.-2      	; 0x105a <__stop_program>
